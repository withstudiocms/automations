name: Release Bot - Package Mapper

on:
  workflow_call:
    inputs:
      CWD:
        type: string
        required: true
        description: >
          The current working directory where the release bot should operate.
          This is typically the root of the repository.

jobs:
  package-mapper:
    runs-on: ubuntu-latest
    outputs:
      package-map: ${{ steps.package-map.outputs.result }}
    steps:
      - name: Install Extra Dependencies
        run: pnpm install tinyglobby

      - name: Generate Package Map
        id: package-map
        uses: actions/github-script@v7
        env:
          CWD: ${{ inputs.CWD }}
        with:
          result-encoding: string
          script: |
            const { glob } = require('tinyglobby');
            const { readFile } = require('fs/promises');
            const { fileURLToPath } = require('url');

            const CWD = process.env.CWD || '.';
            const CWD_URL = new URL(CWD, 'file://');

            const packageMap = new Map();

            async function generatePackageMap() {
              const packageRoot = new URL('./packages/', CWD_URL);
              const packages = await glob(['*/package.json', '*/*/pacakge.json'], {
                cwd: fileURLToPath(packageRoot),
                expandDirectories: false,
                ignore: ['**/node_modules/**'],
              });

              await Promise.all(packages.map(async (pkg) => {
                  const pkgFile = fileURLToPath(new URL(pkg, packageRoot));
                  const content = await readFile(pkgFile).then((res) => JSON.parse(res.toString()));
                  packageMap.set(content.name, `./packages/${pkg.replace('/package.json', '')}`);
                });
              );
            }

            await generatePackageMap();

            return JSON.stringify(Object.fromEntries(packageMap));